#include <cs50.h>
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <stdlib.h>

bool only_digits(string k);
char rotate(char c, int n);

int main(int argc, string argv[])
{
    //checks if the user inputs a single command line argument, and if they don't, tells them how to input this, and returns 1
    if (argc != 2)
    {
        printf("Usage: ./caesar key\n");
        return 1;
    }

    //checks to confirm that the command line argument is numeric, and if it isn't tells the user how to input this, and returns 1
    bool digittest = only_digits(argv[1]);

    if (digittest == true)
    {
        //converts argv into an into value "key", then gets user input for plaintext, and prints the word ciphertext before printing the enciphered message itself
        int key = atoi(argv[1]);
        string text = get_string("plaintext: ");
        printf("ciphertext: ");
        //iterates through the plaintext string for each char, checking if it is a letter, and if so increasing it by the key
        for (int i = 0; i < strlen(text); i++)
        {
            char rc = rotate(text[i], key);
            printf("%c", rc);
        }
        printf("\n");
    }
    //if the key doesn't pass the digit test, thus containing characters other than numbered digits, it returns 1, and prompts the user to re-enter appropriately
    else
    {
        printf("Usage: ./caesar key\n");
        return 1;
    }
}

bool only_digits(string key)
{
    //iterates through each letter of the string
    for (int i = 0; i < strlen(key); i++)
    {
        //checking if it is a valid numeric digit, if at any point it detects it isn't a valid numeric digit, it returns false to main
        if (isdigit(key[i]) == 0)
        {
            return false;
        }
    }
    return true;
}

char rotate(char c, int n)
{
    if (isalpha(c))
    {
        //if the char is uppercase and exceeds the highest uppercase letter, it rotates it back around to be the letter it would be had it rotated around to start from the start of the alphabet again
        if (isupper(c))
        {
            c = c + n;
            c = c - 65;
            c = c % 26;
            c = c + 65;
        }
        //if the char is lowercase and exceeds the highest lowercase letter, it rotates it back around to be the letter it would be had it rotated around to start from the start of the alphabet again
        if (islower(c))
        {
            c = c + n;
            c = c - 97;
            c = c % 26;
            c = c + 97;
        }
    }
    return c;
}
